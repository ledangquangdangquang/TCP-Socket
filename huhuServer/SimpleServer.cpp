#include "SimpleServer.h"
#include "ClientHandler.h"
#include <QDebug>
#include <unistd.h> // üëà ƒë·ªÉ d√πng STDIN_FILENO
#include <QThread>

#define PORT 1234
// ADD multi
/*
    H√†m kh·ªüi t·∫°o `SimpleServer`:
    * G·ªçi `listen()` ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫Øng nghe tr√™n c·ªïng 12345.
    * N·∫øu th√†nh c√¥ng, in ra th√¥ng b√°o; n·∫øu kh√¥ng, b√°o l·ªói.
    * T·∫°o `QSocketNotifier` ƒë·ªÉ theo d√µi stdin (b√†n ph√≠m).
    * K·∫øt n·ªëi t√≠n hi·ªáu `activated` t·ª´ `stdinNotifier` t·ªõi slot `onServerInput()`
       ƒë·ªÉ x·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng nh·∫≠p v√†o terminal.
*/
SimpleServer::SimpleServer(QObject *parent) : QTcpServer(parent) {
    if (listen(QHostAddress::Any, 12345)) {
        qDebug() << "Server ƒëang ch·∫°y t·∫°i c·ªïng 12345...";
    } else {
        qDebug() << "Kh√¥ng th·ªÉ l·∫Øng nghe tr√™n c·ªïng 12345";
    }
    stdinNotifier = new QSocketNotifier(fileno(stdin), QSocketNotifier::Read, this);
    connect(stdinNotifier, &QSocketNotifier::activated, this, &SimpleServer::onServerInput);

}

/*
    H√†m `incomingConnection` x·ª≠ l√Ω khi c√≥ client m·ªõi k·∫øt n·ªëi:
    * T·∫°o `ClientHandler` v·ªõi `socketDescriptor` c·ªßa client.
    * T·∫°o `QThread` m·ªõi, chuy·ªÉn `handler` sang thread ƒë√≥.
    * Khi thread b·∫Øt ƒë·∫ßu (`started`), g·ªçi `handler->start()` ƒë·ªÉ thi·∫øt l·∫≠p socket.
    * K·∫øt n·ªëi t√≠n hi·ªáu `disconnected` ƒë·ªÉ:
      * X√≥a `handler` kh·ªèi danh s√°ch client.
      * Gi·∫£i ph√≥ng b·ªô nh·ªõ `handler` v√† d·ª´ng + x√≥a thread.
    * K·∫øt n·ªëi `messageReceived` ƒë·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn t·ªõi h√†m `broadcastMessage`.
    * Th√™m `handler` v√†o danh s√°ch `clients`.
    * B·∫Øt ƒë·∫ßu thread.
*/
void SimpleServer::incomingConnection(qintptr socketDescriptor) {
    auto *handler = new ClientHandler(socketDescriptor);
    auto *thread = new QThread;

    handler->moveToThread(thread);
    connect(thread, &QThread::started, handler, &ClientHandler::start);
    connect(handler, &ClientHandler::disconnected, this, [=]() {
        clients.removeOne(handler);
        handler->deleteLater();
        thread->quit();
        thread->deleteLater();
    });

    connect(handler, &ClientHandler::messageReceived, this, &SimpleServer::broadcastMessage);
    clients.append(handler);
    thread->start();
}
/*
    H√†m `broadcastMessage` nh·∫≠n tin t·ª´ m·ªôt client (`sender`) v√† g·ª≠i l·∫°i cho t·∫•t c·∫£ client kh√°c:
    * In n·ªôi dung tin nh·∫≠n ƒë∆∞·ª£c.
    * Duy·ªát qua danh s√°ch `clients`.
    * G·ª≠i tin nh·∫Øn cho m·ªçi client **kh√°c** v·ªõi ng∆∞·ªùi g·ª≠i (`sender`).
*/
void SimpleServer::broadcastMessage(const QString &message, ClientHandler* sender) {
    qDebug() << "Ph√°t tin t·ª´ client:" << message.trimmed();

    for (ClientHandler* client : clients) {
        if (client != sender) {
            client->sendMessage(message);
        }
    }
}

/*
    H√†m `onServerInput` x·ª≠ l√Ω l·ªánh t·ª´ b√†n ph√≠m:
    * ƒê·ªçc 1 d√≤ng t·ª´ `stdin`, lo·∫°i b·ªè kho·∫£ng tr·∫Øng.
    * N·∫øu kh√¥ng r·ªóng, ph√°t tin t·ªõi **t·∫•t c·∫£ client** (v√¨ `sender = nullptr`).
    * D·∫°ng tin: `[Server] n·ªôi_dung`.
*/
void SimpleServer::onServerInput() {
    QString line = QTextStream(stdin).readLine().trimmed();

    if (!line.isEmpty())
        broadcastMessage("[Server] " + line, nullptr);
}

/*
    H√†m `removeClient`:
    * In th√¥ng b√°o khi client ng·∫Øt k·∫øt n·ªëi.
    * X√≥a client kh·ªèi danh s√°ch `clients`.
    * G·ªçi `deleteLater()` ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ client an to√†n trong event loop.
*/
void SimpleServer::removeClient(ClientHandler* client) {
    qDebug() << "Client ng·∫Øt k·∫øt n·ªëi";
    clients.removeOne(client);
    client->deleteLater();
}
// ---------------------------------

// Server m·ªü c·ªïng PORT ch·ªù client k·∫øt n·ªëi, khi c√≥ k·∫øt n·ªëi m·ªõi g·ªçi onNewConnection.
//SimpleServer::SimpleServer(QObject *parent) : QTcpServer(parent) {
//    listen(QHostAddress::Any, PORT);
//    qDebug() << "Listening on port" << PORT<< "...";
//    connect(this, &QTcpServer::newConnection, this, &SimpleServer::onNewConnection);
//}

/*
    C√≥ client k·∫øt n·ªëi, l·∫•y socket ƒë√≥, b·∫Øt s·ª± ki·ªán khi client
    g·ª≠i d·ªØ li·ªáu (readyRead) ho·∫∑c ng·∫Øt k·∫øt n·ªëi (disconnected).
    ƒê·ªìng th·ªùi t·∫°o notifier ƒë·ªçc d·ªØ li·ªáu t·ª´ b√†n ph√≠m server (stdin) ƒë·ªÉ g·ª≠i tin.
*/
void SimpleServer::onNewConnection() {
    clientSocket = nextPendingConnection();
    qDebug() << "Client k·∫øt n·ªëi!";

    connect(clientSocket, &QTcpSocket::readyRead, this, &SimpleServer::onClientReadyRead);
    connect(clientSocket, &QTcpSocket::disconnected, this, &SimpleServer::onClientDisconnected);
    // Add to chat client
    stdinNotifier = new QSocketNotifier(STDIN_FILENO, QSocketNotifier::Read, this);
    connect(stdinNotifier, &QSocketNotifier::activated, this, &SimpleServer::onServerInput);
}
/*
    H√†m n√†y ƒë·ªçc d√≤ng t·ª´ stdin (b√†n ph√≠m server),
    n·∫øu kh√¥ng r·ªóng th√¨ g·ª≠i qua clientSocket.
    ‚Üí Cho ph√©p server ch·ªß ƒë·ªông g·ª≠i tin nh·∫Øn cho client.
*/
//void SimpleServer::onServerInput() {
//    if (!clientSocket) return;

//    QTextStream in(stdin);
//    QString line = in.readLine();
//    if (!line.isEmpty()) {
//        clientSocket->write(line.toUtf8());
//    }
//}
/*
    ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu client g·ª≠i (readAll()).
    In ra console n·ªôi dung nh·∫≠n ƒë∆∞·ª£c t·ª´ client.
*/
void SimpleServer::onClientReadyRead() {
    QByteArray data = clientSocket->readAll();
    qDebug() << "Client g·ª≠i:" << data;
}
/*
    In th√¥ng b√°o ng·∫Øt k·∫øt n·ªëi.
    Gi·∫£i ph√≥ng clientSocket (s·ª≠ d·ª•ng deleteLater() ƒë·ªÉ xo√° sau event loop).
    G√°n nullptr ƒë·ªÉ tr√°nh d√πng socket c≈© n·ªØa.
*/
void SimpleServer::onClientDisconnected() {
    qDebug() << "Client ng·∫Øt k·∫øt n·ªëi";
    clientSocket->deleteLater();
    clientSocket = nullptr;
}
