#include "ClientHandler.h"
#include <QDebug>
#include <QFile>

/*
    H√†m kh·ªüi t·∫°o `ClientHandler` nh·∫≠n `socketDescriptor` v√†
    g√°n v√†o bi·∫øn th√†nh vi√™n `m_socketDescriptor`.
    ƒê·ªìng th·ªùi g·ªçi h√†m kh·ªüi t·∫°o c·ªßa `QObject` v·ªõi `parent`.
*/
ClientHandler::ClientHandler(qintptr socketDescriptor, QObject *parent)
    : QObject(parent), m_socketDescriptor(socketDescriptor) {
}

/*
    H√†m h·ªßy `~ClientHandler` ki·ªÉm tra n·∫øu `m_socket` t·ªìn t·∫°i th√¨
    g·ªçi `deleteLater()` ƒë·ªÉ x√≥a n√≥ an to√†n trong event loop.
*/
ClientHandler::~ClientHandler() {
    if (m_socket) {
        m_socket->deleteLater();
    }
}

/*
    H√†m `ClientHandler::start()` l√†m 3 vi·ªác ch√≠nh:
    1. T·∫°o `QTcpSocket` m·ªõi g·∫Øn v·ªõi `this`.
    2. G·∫Øn socket descriptor ƒë·ªÉ k·∫øt n·ªëi v·ªõi client.
       * N·∫øu th·∫•t b·∫°i th√¨ log l·ªói v√† ph√°t t√≠n hi·ªáu `disconnected`.
    3. K·∫øt n·ªëi c√°c signal `readyRead` v√† `disconnected` v·ªõi slot x·ª≠ l√Ω t∆∞∆°ng ·ª©ng.

    N√≥ thay th·∫ø cho vi·ªác d√πng `run()` n·∫øu b·∫°n t√°ch logic x·ª≠ l√Ω socket ra kh·ªèi `QThread`.
*/
void ClientHandler::start() {
    m_socket = new QTcpSocket(this);

    if (!m_socket->setSocketDescriptor(m_socketDescriptor)) {
        qWarning() << "Kh√¥ng th·ªÉ set socket descriptor cho client";
        emit disconnected(this);
        return;
    }

    connect(m_socket, &QTcpSocket::readyRead, this, &ClientHandler::onReadyRead);
    connect(m_socket, &QTcpSocket::disconnected, this, &ClientHandler::onDisconnected);
}

/*
    H√†m `onReadyRead()` ƒë·ªçc to√†n b·ªô d·ªØ li·ªáu t·ª´ socket khi c√≥ d·ªØ li·ªáu ƒë·∫øn,
    r·ªìi ph√°t t√≠n hi·ªáu `messageReceived` k√®m d·ªØ li·ªáu (chuy·ªÉn sang `QString`)
    v√† con tr·ªè ƒë·∫øn ch√≠nh `ClientHandler`.
*/
// void ClientHandler::onReadyRead() {
    // QByteArray data = m_socket->readAll();
    // // qDebug() << "[DEBUG] Client g·ª≠i:" << data; // test tr·ª±c ti·∫øp
    // emit messageReceived(QString::fromUtf8(data), this);
// }
enum class ReceiveMode { Text, File };

ReceiveMode mode = ReceiveMode::Text;
QString pendingFileName;
qint64 pendingFileSize = 0;
qint64 receivedBytes = 0;
QFile pendingFile;
void ClientHandler::onReadyRead()
{
    QTcpSocket *clientSocket = qobject_cast<QTcpSocket*>(sender());
    if (!clientSocket) return;

    static QMap<QTcpSocket*, qint64> remainingBytes;
    static QMap<QTcpSocket*, QFile*> fileMap;

    while (clientSocket->bytesAvailable() > 0) {
        // N·∫øu ƒëang nh·∫≠n file
        if (remainingBytes.contains(clientSocket) && remainingBytes[clientSocket] > 0) {
            QFile *file = fileMap[clientSocket];
            QByteArray data = clientSocket->read(qMin(remainingBytes[clientSocket], (qint64)4096));
            file->write(data);
            remainingBytes[clientSocket] -= data.size();

            if (remainingBytes[clientSocket] <= 0) {
                file->close();
                delete file;
                fileMap.remove(clientSocket);
                remainingBytes.remove(clientSocket);
                qDebug() << "‚úÖ File nh·∫≠n xong!";
            }
            continue;
        }

        // N·∫øu ch∆∞a ·ªü ch·∫ø ƒë·ªô nh·∫≠n file ‚Üí ƒë·ªçc tin nh·∫Øn
        QByteArray message = clientSocket->readLine().trimmed();

        if (message.startsWith("FILE:")) {
            // ƒê·ªãnh d·∫°ng: FILE:<t√™n_file>:<size>
            QList<QByteArray> parts = message.split(':');
            if (parts.size() == 3) {
                QString fileName = parts[1];
                qint64 fileSize = parts[2].toLongLong();

                QFile *file = new QFile(fileName);
                if (!file->open(QIODevice::WriteOnly)) {
                    qDebug() << "‚ùå Kh√¥ng th·ªÉ m·ªü file ƒë·ªÉ ghi:" << fileName;
                        delete file;
                    continue;
                }

                fileMap[clientSocket] = file;
                remainingBytes[clientSocket] = fileSize;
                qDebug() << "üìÇ B·∫Øt ƒë·∫ßu nh·∫≠n file:" << fileName << "(" << fileSize << "bytes )";
            }
        } else {
            // Tin nh·∫Øn th∆∞·ªùng
            qDebug() << "üí¨ Tin t·ª´ client:" << message;
        }
    }
}

/*
    H√†m `onDisconnected()` ph√°t t√≠n hi·ªáu `disconnected(this)` khi client
    ng·∫Øt k·∫øt n·ªëi, sau ƒë√≥ x√≥a socket b·∫•t ƒë·ªìng b·ªô b·∫±ng `deleteLater()`
    v√† ƒë·∫∑t con tr·ªè v·ªÅ `nullptr`.
*/
void ClientHandler::onDisconnected() {
    emit disconnected(this);
    m_socket->deleteLater();
    m_socket = nullptr;
}

/*
    H√†m `sendMessage` ki·ªÉm tra n·∫øu socket t·ªìn t·∫°i v√† ƒëang k·∫øt n·ªëi,
    th√¨ g·ª≠i chu·ªói `message` (chuy·ªÉn sang UTF-8) qua socket b·∫±ng `write()`.
*/
void ClientHandler::sendMessage(const QString &message) {
    if (m_socket && m_socket->state() == QTcpSocket::ConnectedState) {
        m_socket->write(message.toUtf8());
    }
}
